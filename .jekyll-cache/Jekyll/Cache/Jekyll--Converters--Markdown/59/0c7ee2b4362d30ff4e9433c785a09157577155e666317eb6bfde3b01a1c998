I"@<h1 id="django-django-model-signal">[django] django model signal</h1>

<p>장고의 model signal은 모델이 저장될때 컨트롤 할 수 있게 도와주는 기능으로 간단하게 생각하면 hooking을 생각하면 된다.</p>

<p>대표적인 사용예로는 사용자에게 특정 행동이 발생되었을때 알림을 가게 하는 기능을 구현 할 수가 있다.</p>

<p>우선, 장고의 signal에는 8가지의 기본 내장 시그널이 존재하며 시그널을 사용자가 직접 커스터 마이징 하여 사용하는것도 가능하다.</p>

<h2 id="siganl의-종류">siganl의 종류</h2>

<p><strong><code class="language-plaintext highlighter-rouge">django.db.models.signals</code></strong></p>

<table>
  <thead>
    <tr>
      <th>시그널명</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">pre_init</code></td>
      <td>django에서 model클래스의 <code class="language-plaintext highlighter-rouge">__init__()</code> 메소드가 실행될때의 시그널</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">post_init</code></td>
      <td>django에서 model클래스의 <code class="language-plaintext highlighter-rouge">__init__()</code>메소드의 실행이 종료된 후 의 시그널</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">pre_save</code></td>
      <td>django에서 model클래스의 <code class="language-plaintext highlighter-rouge">save()</code>메소드가 시작되는 지점의 시그널</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">post_save</code></td>
      <td>django에서 model클래스의 <code class="language-plaintext highlighter-rouge">save()</code>메소드가 종료되는 지점의 시그널</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">pre_delete</code></td>
      <td>django에서 model클래스의 <code class="language-plaintext highlighter-rouge">delete()</code>와 queryset의 <code class="language-plaintext highlighter-rouge">delete()</code>메소드가 시작되는 지점의 시그널</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">post_delete</code></td>
      <td>django에서 model클래스의 <code class="language-plaintext highlighter-rouge">delete()</code>와 queryset의 <code class="language-plaintext highlighter-rouge">delete()</code>메소드가 종료되는 지점의 시그널</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">m2m_changed</code></td>
      <td>ManyToMany필드의 값이 변경될때 보내지는 시그널. <a href="https://docs.djangoproject.com/en/3.1/ref/signals/#m2m-changed">자세히</a></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">class_prepared</code></td>
      <td>django에서 model클래스가 준비됬을경우의 시그널 일반적으로 서드파티앱에서는 사용하지 않는다.</td>
    </tr>
  </tbody>
</table>

<h2 id="signal-적용하기">signal 적용하기</h2>

<p>먼저, django의 manage.py로 startapp을 통해 app을 만들었다면 파일의 구조는 다음과 같을것이다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>app
├── __init__.py
├── admin.py
├── apps.py
├── migrations
│   └── __init__.py
├── models.py
└── views.py
</code></pre></div></div>

<p>여기서 <code class="language-plaintext highlighter-rouge">receivers.py</code>나 혹은 <code class="language-plaintext highlighter-rouge">signals.py</code>를 생성하여 원하는 시그널을 작성해준다.</p>

<p><strong>Example)</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.db.models.signals</span> <span class="kn">import</span> <span class="n">post_save</span>
<span class="kn">from</span> <span class="nn">django.dispatch</span> <span class="kn">import</span> <span class="n">receiver</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Board</span>

<span class="o">@</span><span class="n">receiver</span><span class="p">(</span><span class="n">post_save</span><span class="p">,</span> <span class="n">sender</span><span class="o">=</span><span class="n">Board</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">BoardCreated</span><span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">instance</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="n">notice</span> <span class="o">=</span> <span class="s">f'</span><span class="si">{</span><span class="n">instance</span><span class="p">.</span><span class="n">author</span><span class="si">}</span><span class="s">님이 새로운 게시글을 게시하였습니다.'</span>
    <span class="k">print</span><span class="p">(</span><span class="n">notice</span><span class="p">)</span>
</code></pre></div></div>

<p>다음으로는 이제 시그널을 django에 등록해줘야 한다. apps.py의 내용을 다음과 같이 바꿔주자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.apps</span> <span class="kn">import</span> <span class="n">AppConfig</span>


<span class="k">class</span> <span class="nc">Your_App_Config</span><span class="p">(</span><span class="n">AppConfig</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s">'your_app_name'</span>
    <span class="k">def</span> <span class="nf">ready</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>	<span class="c1"># from here
</span>        <span class="kn">import</span> <span class="nn">your_app_name.signals</span>

</code></pre></div></div>

<p>다음으로는 default App Config를 설정해주어야 한다. 생성한 app의 텅 빈 <code class="language-plaintext highlighter-rouge">__init__.py</code>파일을 열어 방금 설정한 AppConfig클래스를 default로 설정해준다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">default_app_config</span> <span class="o">=</span> <span class="s">'your_app_name.apps.Your_App_Config'</span>
</code></pre></div></div>

<p>장고를 재실행해주면 끝이난다.</p>

<p>끝.</p>
:ET